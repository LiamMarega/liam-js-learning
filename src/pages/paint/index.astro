---
import Footer from "./components/footer.astro";
import Layout from "../../layout/homeLayout.astro";
import Aside from "./components/aside.astro";
import Header from "./components/header.astro";
import Taskbar from "../../components/windows/taskbar.astro";
---

<script>
  // Only redirect if we're actually on the /paint page
  if (typeof window !== "undefined" && window.location.pathname === "/paint") {
    sessionStorage.setItem("openWindow", "/paint");
    window.location.href = "/";
  }
</script>

<Layout title="Paint JS">
  <div id="main-content">
    <div id="paint-container">
      <Header />
      <Aside />
      <main>
        <canvas id="canvas"></canvas>
      </main>
      <Footer />
    </div>
  </div>
</Layout>

<style>
  #loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: black;
    z-index: 1000;
    transition: opacity 0.5s ease-in-out;
  }

  #main-content {
    transition: opacity 0.5s ease-in-out;
    overflow: hidden;
  }

  .title {
    display: flex;
    flex-direction: row;
    gap: 10px;
    position: absolute;
    top: 10px;
    left: 10px;
    z-index: 100;
  }

  .title {
    font-family: "arial-black", serif;
    position: absolute;
    bottom: 12.5%;
    right: 7.5%;
    font-weight: bold;
    font-style: italic;
    color: #efefef;
  }

  .copy {
    position: absolute;
    bottom: 12.5%;
    left: 7.5%;
    color: #efefef;
  }

  /* Paint styles responsive */
  #paint-container {
    border: 0.5px solid black;
    margin: 0;
    display: grid;
    grid-template-columns: min-content 1fr;
    grid-template-rows: auto 1fr auto;
    grid-template-areas:
      "header header"
      "aside main"
      "footer footer";
    height: 100vh;
    width: 100%;
    overflow: hidden;
  }

  main {
    grid-area: main;
    height: 100%;
    width: 100%;
    overflow: hidden;
    display: flex;
    flex-direction: column;
  }

  canvas {
    background-color: #ffffff;
    flex: 1;
    width: 100%;
    height: 100%;
    touch-action: none;
  }

  /* Media queries para diferentes tamaños */
  @media (max-width: 768px) {
    #paint-container {
      grid-template-columns: 1fr;
      grid-template-rows: auto min-content 1fr auto;
      grid-template-areas:
        "header"
        "aside"
        "main"
        "footer";
    }

    canvas {
      min-height: 300px;
    }
  }

  @media (max-height: 600px) {
    #paint-container {
      height: calc(100vh - 30px);
    }

    .logo img {
      width: 50%;
      margin-bottom: -15px;
    }

    .logo .win {
      font-size: 300%;
    }

    .logo .xp {
      font-size: 200%;
      margin-top: -10px;
    }
  }
</style>

<script>
  import { attachEventListeners } from "./lib/paint_methods.ts";

  // Loading animation
  let x = 1;
  const int = setInterval(() => {
    const loader = document?.querySelector(".loader");
    const span = document?.querySelectorAll(".loader span")[0];
    if (!(loader instanceof HTMLElement) || !(span instanceof HTMLElement))
      return;

    if (x == loader.offsetWidth) x = 0;
    x += 1;
    span.style.marginLeft = x + "px";
  }, 10);

  // Hide loading screen after 5 seconds
  setTimeout(() => {
    const loadingOverlay = document?.getElementById("loading-overlay");
    const mainContent = document?.getElementById("main-content");
    const canvas = document?.getElementById("canvas") as HTMLCanvasElement;

    if (loadingOverlay && mainContent && canvas) {
      loadingOverlay.style.opacity = "0";
      mainContent.style.opacity = "1";

      // Ajustar el canvas al tamaño disponible
      const resizeCanvas = () => {
        const container = document?.getElementById("paint-container");
        if (!container) return;

        const mainArea = container.querySelector("main");
        if (!mainArea) return;

        const rect = mainArea.getBoundingClientRect();
        canvas.width = rect.width;
        canvas.height = rect.height;
      };

      resizeCanvas();
      window.addEventListener("resize", resizeCanvas);

      // Remove loading overlay after fade out
      setTimeout(() => {
        loadingOverlay.style.display = "none";
        clearInterval(int);
      }, 500);
    }
  }, 5000);

  attachEventListeners();
</script>
