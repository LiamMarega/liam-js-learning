---
interface Props {
  title: string;
  isOpen: boolean;
  width?: string;
  height?: string;
  path: string;
}

const { title, isOpen, width = "40vw", height = "95vh", path } = Astro.props;
---

<div
  class="window"
  style={`--window-width: ${width}; --window-height: ${height};`}
  data-state={isOpen ? "open" : "closed"}
  data-path={path}
>
  <div class="title-bar">
    <div class="title-bar-text">{title}</div>
    <div class="title-bar-controls">
      <button aria-label="Minimize" class="min"></button>
      <button aria-label="Close" class="cls"></button>
    </div>
  </div>
  <div class="window-content">
    <slot />
  </div>
</div>

<style>
  .window {
    z-index: 1;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: var(--window-width);
    height: var(--window-height);
    min-width: 320px;
    min-height: 240px;
    background: #fff;
    box-shadow:
      inset -1px -1px #00138c,
      inset 1px 1px #0831d9,
      inset -2px -2px #001ea0,
      inset 2px 2px #166aee,
      inset -3px -3px #003bda,
      inset 3px 3px #0855dd;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
    transition: all 0.3s ease;
    display: none;
  }

  .window[data-state="open"] {
    display: flex;
    flex-direction: column;
  }

  .title-bar {
    background: linear-gradient(
      180deg,
      #0997ff,
      #0053ee 8%,
      #0050ee 40%,
      #06f 88%,
      #06f 93%,
      #005bff 95%,
      #003dd7 96%,
      #003dd7
    );
    padding: 3px 5px 3px 3px;
    border-top: 1px solid #0831d9;
    border-left: 1px solid #0831d9;
    border-right: 1px solid #001ea0;
    border-top-left-radius: 8px;
    border-top-right-radius: 7px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: move;
    height: 27px;
  }

  .title-bar-text {
    font-family: "Tahoma", sans-serif;
    font-size: 12px;
    color: white;
    font-weight: bold;
    text-shadow: 1px 1px #0f1089;
    margin-left: 5px;
    pointer-events: none;
  }

  .title-bar-controls {
    display: flex;
    gap: 2px;
  }

  .title-bar button {
    width: 21px;
    height: 21px;
    border: none;
    background-color: #0050ee;
    background-repeat: no-repeat;
    background-position: center;
    cursor: pointer;
  }

  .title-bar button.min {
    background-image: url("data:image/svg+xml,%3Csvg width='8' height='2' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0 0h8v2H0z' fill='%23FFF'/%3E%3C/svg%3E");
  }

  .title-bar button.cls {
    background-image: url("data:image/svg+xml,%3Csvg width='8' height='7' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0 0h2v1h1v1h2V1h1V0h2v1H7v1H6v1H5v1h1v1h1v1h1v1H6V6H5V5H3v1H2v1H0V6h1V5h1V4h1V3H2V2H1V1H0z' fill='%23FFF'/%3E%3C/svg%3E");
  }

  .window-content {
    flex: 1;
    width: 100%;
    overflow: auto;
    display: flex;
    flex-direction: column;
  }

  /* Media queries para responsive */
  @media (max-width: 768px) {
    .window {
      top: 0;
      left: 0;
      transform: none;
      border-radius: 0;
      max-width: 100vw;
      max-height: 100vh;
    }

    .title-bar {
      border-radius: 0;
    }

    .window-content {
      height: calc(100vh - 27px);
    }
  }

  @media (max-height: 500px) {
    .window-content {
      height: calc(100vh - 27px);
    }
  }
</style>

<script>
  // Hacer la ventana arrastrable (mejorado para responsive)
  const windows = document.querySelectorAll(".window");

  windows.forEach((window) => {
    if (!(window instanceof HTMLElement)) return;

    const titleBar = window.querySelector(".title-bar");
    if (!(titleBar instanceof HTMLElement)) return;

    let isDragging = false;
    let startX = 0;
    let startY = 0;
    let windowX = 0;
    let windowY = 0;

    titleBar.addEventListener("mousedown", (e) => {
      if (e.target instanceof HTMLButtonElement) return;

      isDragging = true;
      startX = e.clientX;
      startY = e.clientY;

      const rect = window.getBoundingClientRect();
      windowX = rect.left;
      windowY = rect.top;

      window.style.transition = "none";
    });

    const handleMove = (e: MouseEvent) => {
      if (!isDragging) return;

      const deltaX = e.clientX - startX;
      const deltaY = e.clientY - startY;

      const newX = windowX + deltaX;
      const newY = windowY + deltaY;

      const windowWidth = window.offsetWidth;
      const windowHeight = window.offsetHeight;

      const boundedX = Math.max(
        0,
        Math.min(newX, globalThis.window.innerWidth - windowWidth)
      );
      const boundedY = Math.max(
        0,
        Math.min(newY, globalThis.window.innerHeight - windowHeight)
      );

      window.style.left = `${boundedX}px`;
      window.style.top = `${boundedY}px`;
      window.style.transform = "none";
    };

    document.addEventListener("mousemove", handleMove);

    document.addEventListener("mouseup", () => {
      isDragging = false;
      window.style.transition = "all 0.3s ease";
    });

    // Manejo de botones de control
    const minButton = window.querySelector(".min");
    const closeButton = window.querySelector(".cls");

    if (minButton) {
      minButton.addEventListener("click", () => {
        window.dataset.state = "closed";
      });
    }

    if (closeButton) {
      closeButton.addEventListener("click", () => {
        window.dataset.state = "closed";
      });
    }

    // Manejar redimensionamiento de la ventana
    window.addEventListener("touchmove", (e) => {
      if (e.touches.length === 2) {
        // Implementar redimensionamiento con pinch aquí si es necesario
      }
    });

    // Ajustar posición al redimensionar la ventana
    globalThis.window.addEventListener("resize", () => {
      const rect = window.getBoundingClientRect();
      if (rect.left + rect.width > globalThis.window.innerWidth) {
        window.style.left = `${globalThis.window.innerWidth - rect.width}px`;
      }
      if (rect.top + rect.height > globalThis.window.innerHeight) {
        window.style.top = `${globalThis.window.innerHeight - rect.height}px`;
      }
    });
  });
</script>
