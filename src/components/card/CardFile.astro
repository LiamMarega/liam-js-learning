---
import Image from "astro/components/Image.astro";

export interface Props {
  icon: ImageMetadata;
  title: string;
  redirectPath: string;
}

const { icon, title, redirectPath } = Astro.props;
---

<div class="file-icon" data-path={redirectPath}>
  <div class="icon-container">
    <Image src={icon} alt={title} width={32} height={32} />
  </div>
  <div class="file-name">{title}</div>
</div>

<style>
  .file-icon {
    display: inline-flex;
    flex-direction: column;
    align-items: center;
    width: 95px;
    padding: 12px 6px;
    margin: 7px;
    cursor: pointer;
    border: 1px solid transparent;
    background: transparent;
    border-radius: 4px;
    user-select: none;
    position: relative;
    font-size: 16px;
  }

  .file-icon:hover {
    background: rgba(49, 106, 197, 0.1);
    border: 1px solid rgba(49, 106, 197, 0.3);
  }

  .file-icon.selected .file-name {
    background: #316ac5;
    color: white;
  }

  .icon-container {
    width: 60px;
    height: 60px;
    margin-bottom: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .icon-container img {
    width: 60px;
    height: 60px;
    image-rendering: pixelated;
    image-rendering: -moz-crisp-edges;
    image-rendering: crisp-edges;
  }

  .file-name {
    font-family: "MS Sans Serif", "Tahoma", sans-serif;
    font-size: 16px;
    color: #000000;
    text-align: center;
    word-wrap: break-word;
    line-height: 1.2;
    max-width: 85px;
    padding: 3px 4px;
    border-radius: 2px;
  }

  /* Efecto de selección con dotted border como en XP */
  .file-icon:focus {
    outline-offset: 1px;
  }

  /* Animación sutil para el hover */
  .file-icon:active {
    transform: translateY(1px);
  }
</style>

<script>
  // Variables para manejar clicks
  let clickTimeout: NodeJS.Timeout | null = null;
  let clickCount = 0;

  // Obtener todos los elementos file-icon
  const fileIcons = document.querySelectorAll(
    ".file-icon"
  ) as NodeListOf<HTMLElement>;

  fileIcons.forEach((fileIcon) => {
    // Manejar selección con click simple
    fileIcon.addEventListener("click", (e) => {
      e.preventDefault();

      // Remover selección de otros elementos
      fileIcons.forEach((icon) => icon.classList.remove("selected"));

      // Agregar selección al elemento actual
      fileIcon.classList.add("selected");

      // Contar clicks para detectar doble click
      clickCount++;

      if (clickCount === 1) {
        clickTimeout = setTimeout(() => {
          clickCount = 0;
        }, 300);
      } else if (clickCount === 2) {
        // Doble click detectado
        if (clickTimeout) {
          clearTimeout(clickTimeout);
          clickTimeout = null;
        }
        clickCount = 0;

        // Obtener la ventana modal correspondiente y abrirla
        const path = fileIcon.getAttribute("data-path");
        if (path) {
          const modalWindow = document.querySelector(
            `.window[data-path="${path}"]`
          );
          if (modalWindow instanceof HTMLElement) {
            modalWindow.dataset.state = "open";
          }
        }
      }
    });

    // Manejar doble click nativo como respaldo
    fileIcon.addEventListener("dblclick", (e) => {
      e.preventDefault();
      const path = fileIcon.getAttribute("data-path");
      if (path) {
        const modalWindow = document.querySelector(
          `.window[data-path="${path}"]`
        );
        if (modalWindow instanceof HTMLElement) {
          modalWindow.dataset.state = "open";
        }
      }
    });

    // Manejar navegación con teclado (Enter y Espacio)
    fileIcon.addEventListener("keydown", (e) => {
      if (e.key === "Enter" || e.key === " ") {
        e.preventDefault();
        const path = fileIcon.getAttribute("data-path");
        if (path) {
          const modalWindow = document.querySelector(
            `.window[data-path="${path}"]`
          );
          if (modalWindow instanceof HTMLElement) {
            modalWindow.dataset.state = "open";
          }
        }
      }
    });

    // Hacer el elemento enfocable
    fileIcon.setAttribute("tabindex", "0");
  });

  // Manejar deselección al hacer click fuera
  document.addEventListener("click", (e) => {
    const target = e.target as HTMLElement;
    if (!target.closest(".file-icon")) {
      fileIcons.forEach((icon) => icon.classList.remove("selected"));
    }
  });
</script>
